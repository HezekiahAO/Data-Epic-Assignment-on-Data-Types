Data Epic Assignment in Data Types.
#we have differnet data tyoes such
Numerics Data Types
    Integers
    Floats
    Complex Numbers
Boolean Data Types  greater than or less than

Sequence Data Types 
    Strings Double and Single  quote.
a = "Hello World"
print (a[:5]) this will print Hello and print([6]) will priint W 


    List.  This stores multiple values
    [1,2,3] or ['bed','valilla' 'cake'] a list can take in different data types
     
    you can also add ann item to a list such as 
    icecream['vanilla', 'orange', 'Strawnberry']
    icecream.append(chocolate)
    priint(icecream)

    result = vanilla', 'orange', 'Strawnberry, chocolate

    also, we can change a value in a list by knowing the location of the value we want to cahnge for example
    icecream[0] = grape
    print (icecream)

    result = grape, 'orange', 'Strawnberry, chocolate

List within a List = Nested List for example  (They are mutable)
    nested_list = ['mango', 3, ['orange','orange'], 6]
    if we say 
    nested_list[2]
    result = 3
    nested_list[3] 
    result = orange orange 
    and finnally,  if we say

    nested_list[3][2]
    result = orange     # the second orange


            5. Reverse (.reverse())
Reverses the list in place (does not sort, just flips the order)
4. Sort (.sort())
Sorts the list in ascending order (default).
3. Pop (.pop())
Removes and returns an item by index (default is the last item).    
1. Append (.append())
Adds a new item to the end of the list.
2. Remove (.remove())
Removes the first occurrence of a specific value    






Turples this are just like list but they can not be changed after there creation like (They are immutable)  cannot be changed     "cusvinvspv a normal idea that happens when tou jusy find out you can code off keyboard"
    Turples_scoops(1,1,2,3,4,4,5,)
    Turples_scoops.append(5)

    result = error

    
#set 
this is almost like a list or turple but they dont have any dupicate index
    for exaxmple, 
    daily = {1, 3, 4}

    it can be used to compare and check for values in one or the other
    | uesd to show all the elements in the 2 set, 
    & is uesd to combine the two set and print out only the unique values leaving out the duplicates
    - is used to subtract a value form another
    ^   is used to check if a value is in one or the other but not in both  ie the unique values that belongs to each set

dictionaries
This one has something that is called a key value Pair
example
dict_cream = {'name' : David}. or dict_cream_two = {'name' : [David, Solomon afeez]}.
The name is the key and David is the Value.  CHeck Screenshot 965 for more examples. the way you use in a programm is by using maps.

ALthough, the way you call a key in dictionaries is different.
You have to call the key example
dict_cream['name'] and the response is David.
    you could also update some a dict by just calling its key and setting it = Ola
    the dict_cream.update can update a dictionary but not remove.

In programming, indexing refers to accessing a specific element in a sequence (like a list or string) using its position (index), 
while slicing extracts a portion or subsequence of elements from a sequence by specifying a range of indices

Indexing:
Purpose: To retrieve a single element from a sequence based on its position.

Method: Use square brackets [] with the index number to access the element.
Example: In Python, if you have a list my_list = ["apple", "banana", "cherry"], then my_list[0] would return "apple" (the first element, as indexing starts at 0).
Negative Indexing: You can also use negative indices to access elements from the end of the sequence (e.g., my_list[-1] would return "cherry")


Slicing:
Purpose:
To extract a portion of a sequence (a subsequence).
Method:
Use square brackets [] with a colon : to define the start and end indices, or use a step value to extract elements at certain intervals.
Example:
In Python, my_list[1:3] would return ["banana", "cherry"] (elements from index 1 up to, but not including, index 3).
Optional Step Value:
You can add a third value after the colon to specify a step value (e.g., my_list[0:3:2] would return ["apple", "cherry"] by taking every second element starting from index 0). 